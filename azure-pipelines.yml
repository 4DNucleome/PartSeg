trigger:
  branches:
    include:
    - '*'
    exclude:
    - dependabot/*
    - release/*
  tags:
    include:
    - v*

variables:
  TOX_PARALLEL_NO_SPINNER: 1
  AZURE_PIPELINES: 1

stages:
  - stage: GetTestData
    jobs:
    - job: linux
      pool: {vmImage: 'Ubuntu-16.04'}
      steps:
        - script: bash .travis/install2.sh
          displayName: "download data"
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.6'
          displayName: 'Use Python $(python.version)'
        - script: python build_utils/cut_changelog.py changelog_cut.md
          displayName: "Cut changelog"
        - publish: test_data
          artifact: TestData
        - publish: changelog_cut.md
          artifact: ReleaseInfo

  - stage: formating_check
    dependsOn: []
    jobs:
      - job: check_formating
        pool: {vmImage: 'Ubuntu-18.04'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - bash: |
              python -m pip install pre-commit
            displayName: InstallDeps
          - bash: pre-commit run --all --show-diff-on-failure
            displayName: pre-commmit

  - stage: manifest_check
    dependsOn: []
    jobs:
      - job: manifest_check
        pool: {vmImage: 'Ubuntu-18.04'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - bash: |
              python -m pip install check-manifest==0.42 numpy==1.19.1
            displayName: InstallDeps
          - bash: check-manifest
            displayName: check-manifest

  - stage: Documentation_check
    dependsOn: []
    jobs:
      - job: help
        pool: {vmImage: 'Ubuntu-16.04'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - bash: |
              python -m pip install -r requirements/requirements_pyinstaller.txt
              python -m pip install -r requirements/requirements_dev.txt
              python -m pip install .
              python -m pip install -r docs/requirements.txt
            displayName: InstallDeps
          - bash: make -C docs html
            displayName: BuildDocs
          - bash: |
              mkdir docs_result
              cd docs/_build; zip -r ../../docs_result/PartSeg_documentation_`python -c "import PartSeg; print(PartSeg.__version__)"`.zip html; cd ../..
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: docs_result
              artifactName: docs

      - job: Notebook_check
        pool: {vmImage: 'Ubuntu-16.04'}
        continueOnError: true
        variables:
          DATA_PATH: typy_neuronow2
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - bash: |
              python -m pip install -r requirements_pyinstaller.txt
              python -m pip install .
              python -m pip install jupyter[all]
              python -m pip install matplotlib
            displayName: InstallDeps
          - bash: DATA_PATH=${PWD}/typy_neuronow2 jupyter nbconvert --to notebook --execute tutorials/tutorial_neuron_types/Neuron_types_example.ipynb
            displayName: "Run Notebook"

  - stage: Tests
    dependsOn: [GetTestData, formating_check]
    variables:
      AZURE_PIPELINES: 1
    jobs:
    - job: test
      condition: not(startsWith(variables['Build.SourceBranch'], 'refs/heads/feature'))
      strategy:
        matrix:
          macos:
            imageName: 'macos-10.14'
          windows:
            imageName: 'vs2017-win2016'
      pool: {vmImage: $(imageName)}
      steps:
        - template: .azure-pipelines/tests.yaml
    - job: test_linux
      pool: { vmImage: 'ubuntu-16.04' }
      steps:
        - template: .azure-pipelines/tests.yaml


  - stage: Builds
    dependsOn: Tests
    variables:
      CIBW_BEFORE_BUILD: pip install numpy cython
      CIBW_TEST_EXTRAS: pyqt,test
      CIBW_BUILD: cp3[6-8]*64
      CIBW_TEST_COMMAND: pytest {project}/package/tests
    jobs:
      - job: sdist
        pool: {vmImage: 'Ubuntu-18.04'}
        steps:
          - task: UsePythonVersion@0
          - bash: pip install -r requirements/requirements_dev.txt
            displayName: sdist requirements
          - bash: python setup.py sdist -d wheelhouse
            displayName: sdist
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: wheelhouse
              artifactName: wheels

      - job: wheel_manylinux2010
        condition: not(startsWith(variables['Build.SourceBranch'], 'refs/heads/feature'))
        pool: {vmImage: 'Ubuntu-18.04'}
        variables:
          CIBW_BEFORE_ALL_LINUX: yum -y install hdf5-devel fontconfig
          CIBW_TEST_REQUIRES: pytest pytest-cov
          CIBW_TEST_COMMAND: pytest {project}/package/tests --ignore={project}/package/tests/test_qt_part
          CIBW_BEFORE_TEST: pip install PyQt5==5.13.2
          CIBW_TEST_EXTRAS: ""
        steps:
          - template: .azure-pipelines/tests.yaml

      - job: wheel_manylinux2014
        strategy:
        pool: { vmImage: 'ubuntu-18.04' }
        variables:
          CIBW_BEFORE_ALL_LINUX: yum -y install hdf5-devel fontconfig
          CIBW_TEST_COMMAND_LINUX: pytest {project}/package/tests --ignore={project}/package/tests/test_qt_part
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
        steps:
          - template: .azure-pipelines/wheels.yaml

      - job: wheel
        strategy:
          matrix:
            macos:
              imageName: 'macos-10.14'
            macos14:
              imageName: 'macos-10.14'
              MACOSX_DEPLOYMENT_TARGET: "10.14"
            windows:
              imageName: 'vs2017-win2016'
        pool: {vmImage: $(imageName)}
        variables:
          CIBW_TEST_COMMAND_WINDOWS: pytest {project}/package/tests || pytest {project}/package/tests --ignore={project}/package/tests/test_qt_part/test_main_windows.py
          CIBW_TEST_COMMAND_MACOS: pytest {project}/package/tests || pytest {project}/package/tests --ignore={project}/package/tests/test_qt_part/test_main_windows.py
          MACOSX_DEPLOYMENT_TARGET: "10.9"
        steps:
          - template: .azure-pipelines/wheels.yaml

      - job: pyinstaller
        strategy:
          matrix:
            linux:
              imageName: 'ubuntu-16.04'
              test_path: dist/PartSeg/PartSeg _test
              DISPLAY: ':99.0'
            macos:
              imageName: 'macos-10.14'
              test_path: dist/PartSeg/PartSeg _test
            windows:
              imageName: 'vs2017-win2016'
              test_path: dist\PartSeg\PartSeg _test
        pool: {vmImage: $(imageName)}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - script: |
              sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
              /sbin/start-stop-daemon --start --quiet \
                          --pidfile /tmp/custom_xvfb_99.pid --make-pidfile \
                          --background --exec /usr/bin/Xvfb \
                          -- :99 -screen 0 1920x1200x24 -ac +extension GLX
            condition: "startsWith(variables['imageName'], 'ubuntu')"
            displayName: "install libs"

          - bash: |
              python -m pip install -r requirements/requirements_pyinstaller.txt
              python -m pip install -e .
              python  build_utils/create_and_pack_executable.py

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: dist2
              artifactName: execs
          - script: $(test_path)
            displayName: TestBuild
