trigger:
  branches:
    include:
    - master
    - develop
  tags:
    include:
    - v*

stages:
  - stage: GetTestData
    jobs:
    - job: linux
      pool: {vmImage: 'Ubuntu-16.04'}
      steps:
        - script: bash .travis/install2.sh
          displayName: "download data"
        - publish: test_data
          artifact: TestData
        - publish: changelog.md
          artifact: ReleaseInfo

  - stage: Tests
    jobs:
    - job: linux
      pool: {vmImage: 'Ubuntu-16.04'}
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
            TOXENV: py36-PyQt5,py36-PySide2
          Python37:
            python.version: '3.7'
            TOXENV: py37-PyQt5,py37-PySide2
      steps:
        - task: UsePythonVersion@0
          displayName: 'Use Python $(python.version)'
          inputs:
            versionSpec: '$(python.version)'
        - script: sudo apt-get update && sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0
          displayName: "install libs"
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: TestData
            path: $(Build.SourcesDirectory)/test_data
        - bash: |
            ls
            ls test_data || true

        - script: pip install tox cython numpy pytest-azurepipelines
          displayName: "Install deps"
        - script: tox -c tox-azure.ini
          displayName: "Run Tox"
    - job: macos
      pool: {vmImage: 'macOS-10.13'}
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
            TOXENV: py36-PyQt5,py36-PySide2
          Python37:
            python.version: '3.7'
            TOXENV: py37-PyQt5,py37-PySide2
      steps:
        - task: UsePythonVersion@0
          displayName: 'Use Python $(python.version)'
          inputs:
            versionSpec: '$(python.version)'
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: TestData
            path: $(Build.SourcesDirectory)/test_data
        - script: pip install tox cython numpy pytest-azurepipelines
          displayName: "Install deps"
        - script: tox -c tox-azure.ini
          displayName: "Run Tox"
    - job: windows
      pool: {vmImage: 'vs2017-win2016'}
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
            TOXENV: py36-PyQt5,py36-PySide2
          Python37:
            python.version: '3.7'
            TOXENV: py37-PyQt5,py37-PySide2
      steps:
        - task: UsePythonVersion@0
          displayName: 'Use Python $(python.version)'
          inputs:
            versionSpec: '$(python.version)'
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: TestData
            path: $(Build.SourcesDirectory)/test_data
        - script: pip install tox cython numpy pytest-azurepipelines
          displayName: "Install deps"
        - script: tox -c tox-azure.ini
          displayName: "Run Tox"

  - stage: Builds
    dependsOn: Tests
    variables:
      CIBW_BEFORE_BUILD: pip install numpy cython
    jobs:
      - job: linux_wheel
        pool: {vmImage: 'Ubuntu-16.04'}
        variables:
          CIBW_BUILD: cp36-manylinux1_x86_64 cp37-manylinux1_x86_64
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {project}/package/tests --ignore={project}/package/tests/test_gui
        steps:
          - task: UsePythonVersion@0
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: TestData
              path: $(Build.SourcesDirectory)/test_data
          - bash: |
              python -m pip install cibuildwheel cython numpy
              python -m cibuildwheel
              python setup.py sdist -d wheelhouse
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: wheelhouse
              artifactName: wheels

      - job: macos_wheel
        pool: {vmImage: 'macOS-10.13'}
        variables:
          CIBW_BUILD: cp36-*intel cp37-*intel
          CIBW_TEST_REQUIRES: pytest pytest-qt
          CIBW_TEST_COMMAND: pytest {project}/package/tests
        steps:
          - task: UsePythonVersion@0
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: TestData
              path: $(Build.SourcesDirectory)/test_data
          - bash: |
              python -m pip install git+https://github.com/Czaki/cibuildwheel
              python -m cibuildwheel --output-dir wheelhouse
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: wheelhouse
              artifactName: wheels

      - job: windows_wheel
        pool: {vmImage: 'vs2017-win2016'}
        variables:
          CIBW_BUILD: cp36-*64 cp37-*64
          CIBW_TEST_REQUIRES: pytest pytest-qt
          CIBW_TEST_COMMAND: pytest {project}/package/tests
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: TestData
              path: $(Build.SourcesDirectory)/test_data
          - bash: |
              python -m pip install cibuildwheel
              python -m cibuildwheel --output-dir wheelhouse
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: wheelhouse
              artifactName: wheels

      - job: linux_pyinstaller
        pool: {vmImage: 'Ubuntu-16.04'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
          - bash: |
              python -m pip install -r requirements_pyinstaller.txt
              python -m pip install .
              python  build_utils/create_build.py
          - script: sudo apt-get update && sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0
            displayName: "install libs"
          - script: xvfb-run dist/PartSeg/PartSeg_exec _test
            displayName: TestBuild
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: dist2
              artifactName: execs

      - job: macos_pyinstaller
        pool: {vmImage: 'macOS-10.13'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
          - bash: sudo xcode-select -s /Applications/Xcode_10.app/Contents/Developer
          - bash: |
              python -m pip install -r requirements_pyinstaller.txt
              python -m pip install .
              python  build_utils/create_build.py
          - script: dist/PartSeg/PartSeg_exec _test
            displayName: TestBuild
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: dist2
              artifactName: execs

      - job: windows_pyinstaller
        pool: {vmImage: 'vs2017-win2016'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
          - bash: |
              python -m pip install -r requirements_pyinstaller.txt
              python -m pip install .
              python  build_utils/create_build.py
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: dist2
              artifactName: execs
          - script: dist\PartSeg\PartSeg_exec _test
            displayName: TestBuild
