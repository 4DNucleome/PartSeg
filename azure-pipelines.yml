trigger:
  branches:
    include:
    - master
    - develop
    - feature_prepare/**
    - main
  tags:
    include:
    - v*

variables:
  TOX_PARALLEL_NO_SPINNER: 1
  AZURE_PIPELINES: 1

stages:
  - stage: GetTestData
    jobs:
    - job: linux
      pool: {vmImage: 'Ubuntu-22.04'}
      steps:
        - script: bash build_utils/download_data.sh
          displayName: "download data"
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.9'
          displayName: 'Use Python $(python.version)'
        - script: python build_utils/cut_changelog.py changelog_cut.md
          displayName: "Cut changelog"
        - publish: test_data
          artifact: TestData
        - publish: changelog_cut.md
          artifact: ReleaseInfo

  - stage: formatting_check
    dependsOn: []
    jobs:
      - job: check_formating
        pool:
          vmImage: ubuntu-latest
        variables:
          PRE_COMMIT_HOME: $(Pipeline.Workspace)/pre-commit-cache
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x64}}
          - script: echo "##vso[task.setvariable variable=PY]$(python -VV)"
          - task: Cache@2
            inputs:
              key: pre-commit | .pre-commit-config.yaml | "$(PY)"
              path: $(PRE_COMMIT_HOME)
          - bash: |
              python -m pip install pre-commit
            displayName: InstallDeps
          - bash: pre-commit run --all --show-diff-on-failure
            displayName: pre-commmit

  - stage: manifest_check
    dependsOn: []
    jobs:
      - job: manifest_check
        pool: {vmImage: 'Ubuntu-latest'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.10', architecture: x64}}
          - bash: |
              python -m pip install check-manifest==0.49 numpy==1.22.3
            displayName: InstallDeps
          - bash: check-manifest
            displayName: check-manifest

  - stage: Documentation_check
    dependsOn: []
    jobs:
      - job: help
        pool: {vmImage: 'ubuntu-latest'}
        variables:
          pip_cache_dir: $(Pipeline.Workspace)/.pip
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.11', architecture: x64}}
          - template: .azure-pipelines/pip_cache.yaml
            parameters:
              key: doc | requirements/constraints_py3.9.txt | "$(PY)"
              path: $(pip_cache_dir)
          - bash: |
              python -m pip install tox
            displayName: Install tox
          - bash: |
              python -m tox -e docs
            displayName: build docs
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: docs.tar.gz
              artifactName: docs

      - job: Notebook_check
        pool: {vmImage: 'Ubuntu-22.04'}
        continueOnError: true
        variables:
          DATA_PATH: typy_neuronow2
          pip_cache_dir: $(Pipeline.Workspace)/.pip
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.11', architecture: x64}}
          - template: .azure-pipelines/pip_cache.yaml
            parameters:
              key: notebook | requirements/constraints_py3.11.txt | "$(PY)"
              path: $(pip_cache_dir)
          - bash: |
              python -m pip install tox
            displayName: "Install tox"
          - bash: tox -e jupyter
            displayName: "Run Notebook"
            env:
              PIP_CONSTRAINT: requirements/constraints_py3.11.txt

  - stage: Tests_linux
    dependsOn: [GetTestData, formatting_check]
    variables:
      AZURE_PIPELINES: 1
      pip_cache_dir: $(Pipeline.Workspace)/.pip
    jobs:
    - job: test_linux
      pool: { vmImage: 'ubuntu-22.04' }
      variables:
        AZURE_PIPELINES: 1
        DISPLAY: ':99.0'
        pip_cache_dir: $(Pipeline.Workspace)/.pip
      steps:
        - template: .azure-pipelines/linux_libs.yaml
        - template: .azure-pipelines/tests.yaml
          parameters:
            cache_dir: $(pip_cache_dir)

  - stage: Tests_other
    dependsOn: [GetTestData, formatting_check]
    variables:
      AZURE_PIPELINES: 1
      pip_cache_dir: $(Pipeline.Workspace)/.pip
    jobs:
    - job: test
      condition: not(startsWith(variables['Build.SourceBranch'], 'refs/heads/feature_prepare'))
      strategy:
        matrix:
          macos:
            imageName: 'macos-13'
          windows:
            imageName: 'windows-2019'
      pool: {vmImage: $(imageName)}
      steps:
        - template: .azure-pipelines/tests.yaml
          parameters:
            cache_dir: $(pip_cache_dir)

  - stage: Builds
    dependsOn: GetTestData
    jobs:
      - job: sdist
        pool: {vmImage: 'Ubuntu-22.04'}
        steps:
          - task: UsePythonVersion@0
          - bash: pip install -r requirements/requirements_dev.txt
            displayName: sdist requirements
          - bash: python -m build .
            displayName: sdist amd wheel
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: dist
              artifactName: wheels

      - job: pyinstaller_linux
        variables:
          test_path: dist/PartSeg/PartSeg _test
          DISPLAY: ':99.0'
          pip_cache_dir: $(Pipeline.Workspace)/.pip
        pool: { vmImage: 'Ubuntu-20.04' }
        steps:
          - template: .azure-pipelines/linux_libs.yaml
          - template: .azure-pipelines/pyinstaller.yaml
            parameters:
              test_path: $(test_path)
              cache_dir: $(pip_cache_dir)

      - job: pyinstaller
        condition: not(startsWith(variables['Build.SourceBranch'], 'refs/heads/feature_prepare'))
        strategy:
          matrix:
            macos:
              imageName: 'macos-13'
              test_path: dist/PartSeg/PartSeg _test || dist/PartSeg/PartSeg _test || dist/PartSeg/PartSeg _test
            windows:
              imageName: 'windows-2019'
              test_path: dist\PartSeg\PartSeg _test
        variables:
          pip_cache_dir: $(Pipeline.Workspace)/.pip
        pool: {vmImage: $(imageName)}
        steps:
          - template: .azure-pipelines/pyinstaller.yaml
            parameters:
              test_path: $(test_path)
              cache_dir: $(pip_cache_dir)
