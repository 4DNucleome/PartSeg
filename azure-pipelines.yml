trigger:
  branches:
    include:
    - '*'
    exclude:
    - dependabot/*
  tags:
    include:
    - v*

variables:
  TOX_PARALLEL_NO_SPINNER: 1

stages:
  - stage: GetTestData
    jobs:
    - job: linux
      pool: {vmImage: 'Ubuntu-16.04'}
      steps:
        - script: bash .travis/install2.sh
          displayName: "download data"
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.6'
          displayName: 'Use Python $(python.version)'
        - script: python build_utils/cut_changelog.py changelog_cut.md
          displayName: "Cut changelog"
        - publish: test_data
          artifact: TestData
        - publish: changelog_cut.md
          artifact: ReleaseInfo

  - stage: Tests
    jobs:
    - job: test
      strategy:
        matrix:
          linux:
            imageName: 'ubuntu-16.04'
          macos:
            imageName: 'macos-10.14'
          windows:
            imageName: 'vs2017-win2016'
      pool: {vmImage: $(imageName)}
      steps:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7'}}
        - script: sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0
          condition: "startsWith(variables['imageName'], 'ubuntu')"
          displayName: "install libs"
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: TestData
            path: $(Build.SourcesDirectory)/test_data
        - script: pip install -r requirements/requirements_dev.txt
          displayName: "Install deps"
        - script: tox -c tox-azure.ini -e py37-PyQt5
          displayName: "Run Tox"

  - stage: Builds
    dependsOn: Tests
    variables:
      CIBW_BEFORE_BUILD: pip install numpy cython
      CIBW_TEST_EXTRAS: pyqt,test
      CIBW_BUILD: cp3[6-8]*64
    jobs:
      - job: wheel_manylinux2010
        pool: {vmImage: 'Ubuntu-16.04'}
        variables:
          CIBW_BEFORE_BUILD: pip install numpy cython; yum -y install hdf5-devel;
          CIBW_TEST_REQUIRES: pytest pytest-cov
          CIBW_TEST_COMMAND: pytest {project}/package/tests --ignore={project}/package/tests/test_qt_part
          CIBW_BEFORE_TEST: pip install PyQt5==5.13.2
          CIBW_TEST_EXTRAS: ""
        steps:
          - task: UsePythonVersion@0
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: TestData
              path: $(Build.SourcesDirectory)/test_data
          - bash: python -m pip install cibuildwheel cython numpy
            displayName: InstallDeps
          - bash: python -m cibuildwheel
            displayName: BuildWheel
          - bash: pip install -r requirements/requirements_dev.txt
            displayName: sdist requirements
          - bash: python setup.py sdist -d wheelhouse
            displayName: sdist
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: wheelhouse
              artifactName: wheels

      - job: wheel
        strategy:
          matrix:
            manylinux2014:
              imageName: 'ubuntu-16.04'
            macos:
              imageName: 'macos-10.14'
            macos14:
              imageName: 'macos-10.14'
              MACOSX_DEPLOYMENT_TARGET: "10.14"
            windows:
              imageName: 'vs2017-win2016'
        pool: {vmImage: $(imageName)}
        variables:
          CIBW_BEFORE_BUILD_LINUX: pip install numpy cython; yum -y install hdf5-devel;
          CIBW_TEST_COMMAND_LINUX: pytest {project}/package/tests --ignore={project}/package/tests/test_qt_part
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_TEST_COMMAND: pytest {project}/package/tests
          MACOSX_DEPLOYMENT_TARGET: "10.9"
        steps:
          - task: UsePythonVersion@0
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: TestData
              path: $(Build.SourcesDirectory)/test_data
          - bash: python -m pip install cibuildwheel cython numpy
            displayName: InstallDeps
          - bash: python -m cibuildwheel
            displayName: BuildWheel
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: wheelhouse
              artifactName: wheels

      - job: pyinstaller
        strategy:
          matrix:
            linux:
              imageName: 'ubuntu-16.04'
              test_path: xvfb-run dist/PartSeg/PartSeg _test
            macos:
              imageName: 'macos-10.14'
              test_path: dist/PartSeg.app/Contents/MacOS/PartSeg _test
            windows:
              imageName: 'vs2017-win2016'
              test_path: dist\PartSeg\PartSeg _test
        pool: {vmImage: $(imageName)}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - bash: |
              python -m pip install -r requirements/requirements_pyinstaller.txt
              python -m pip install -e .
              python  build_utils/create_and_pack_executable.py
          - script: sudo apt-get install -y libdbus-1-3 libxkbcommon-x11-0
            condition: "startsWith(variables['imageName'], 'ubuntu')"
            displayName: "install libs"

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: dist2
              artifactName: execs
          - script: $(test_path)
            displayName: TestBuild

  - stage: Documentation_check
    dependsOn: []
    jobs:
      - job: help
        pool: {vmImage: 'Ubuntu-16.04'}
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - bash: |
              python -m pip install -r requirements/requirements_pyinstaller.txt
              python -m pip install -r requirements/requirements_dev.txt
              python -m pip install .
              python -m pip install -r docs/requirements.txt
            displayName: InstallDeps
          - bash: make -C docs html
            displayName: BuildDocs
          - bash: |
              mkdir docs_result
              cd docs/_build; zip -r ../../docs_result/PartSeg_documentation_`python -c "import PartSeg; print(PartSeg.__version__)"`.zip html; cd ../..
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: docs_result
              artifactName: docs

      - job: Notebook_check
        pool: {vmImage: 'Ubuntu-16.04'}
        continueOnError: true
        variables:
          DATA_PATH: typy_neuronow2
        steps:
          - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
          - bash: |
              python -m pip install -r requirements_pyinstaller.txt
              python -m pip install .
              python -m pip install jupyter[all]
              python -m pip install matplotlib
            displayName: InstallDeps
          - bash: DATA_PATH=${PWD}/typy_neuronow2 jupyter nbconvert --to notebook --execute tutorials/tutorial_neuron_types/Neuron_types_example.ipynb
            displayName: "Run Notebook"
