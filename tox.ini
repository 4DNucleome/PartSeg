# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
envlist = py{38,39,310,311}-{PyQt5,PySide2,PyQt6,PySide6}-all, py{38,39,310,311}-{PyQt5,PySide2,PyQt6,PySide6}-napari_{417,418,419,repo}
toxworkdir=/tmp/tox

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
fail_on_no_env = True

[gh-actions:env]
NAPARI =
    latest: all
    napari417: napari_417
    napari418: napari_417
    napari419: napari_417
    repo: napari_repo
BACKEND =
    pyqt: PyQt5
    pyside: PySide2
    PyQt5: PyQt5
    PySide2: PySide2
    PyQt6: PyQt6
    PySide6: PySide6

[base]
deps =
    # pytest-xvfb ; sys_platform == 'linux'
    PyQt5: PyQt5!=5.15.0
    PyQt5: PyQt5-sip!=12.12.0
    PySide2: PySide2!=5.15.0
    PyQt6: PyQt6
    # fix PySide6 when a new napari release is out
    PySide6: PySide6<6.3.2
    PySide2: npe2!=0.2.2
    imageio != 2.22.1
    pytest-json-report

[testenv]
#recreate=true
passenv =
    QT_API
    CI
    GITHUB_ACTIONS
    AZURE_PIPELINES
    DISPLAY
    XAUTHORITY
    NUMPY_EXPERIMENTAL_ARRAY_FUNCTION
    PYVISTA_OFF_SCREEN
deps =
    {[base]deps}
    pytest-pretty
extras =
    test

commands =
    python -m pytest package/tests --json-report --json-report-file={toxinidir}/report-{envname}-{sys_platform}.json

[testenv:py311-PySide2-conda]
conda_env=environment.yml
deps=
    pytest
    pytest-json-report
    lxml_html_clean

[testenv:py{38,39,310,311}-{PyQt5,PySide2,PyQt6,PySide6}-napari_{417,418,419,repo}]
deps =
    {[testenv]deps}
    417: napari==0.4.17
    417: pydantic<2
    418: napari==0.4.18
    418: pydantic<2
    419: napari==0.4.19.post1
    repo: git+https://github.com/napari/napari.git
commands =
    !repo: python -m pytest -v package/tests/test_PartSeg/test_napari_widgets.py --json-report --json-report-file={toxinidir}/report-{envname}-{sys_platform}.json
    repo: python -m pytest --json-report --json-report-file={toxinidir}/report-{envname}-{sys_platform}.json

[testenv:py{38,39,310,311}-PyQt5-coverage]
deps =
    {[testenv]deps}
commands =
    coverage run -m pytest --json-report --json-report-file={toxinidir}/report-{envname}-{sys_platform}.json

[testenv:py38-PyQt5-minimal]
min_req = 1
min_req_constraints=
    npe2==0.1.1
setenv =
    MINIMAL_REQUIREMENTS=1
    PIP_CONSTRAINT=
deps =
    {[base]deps}
    setuptools_scm[toml]>=3.4
    lxml_html_clean
commands =
    coverage run -m pytest --json-report --json-report-file={toxinidir}/report-{envname}-{sys_platform}.json

[testenv:py{38,39,310,311}-{PyQt5, PySide2,PyQt6,PySide6}-azure]
deps =
    pytest-azurepipelines
    {[testenv]deps}


[testenv:jupyter]
deps =
    {[testenv]deps}
    jupyter
    matplotlib
setenv =
    DATA_PATH = {toxinidir}/typy_neuronow2
commands =
    jupyter nbconvert --to notebook --execute tutorials/tutorial_neuron_types/Neuron_types_example.ipynb

[testenv:docs]
deps =
    {[testenv]deps}
    -rrequirements/constraints_py3.11_docs.txt
allowlist_externals =
    make
    tar
extras =
    docs
commands =
    make -C docs html
    tar -C docs/_build -czf docs.tar.gz html
