# An "early warning" cron job that will install dependencies
# with `pip install --pre` periodically to test for breakage
# (and open an issue if a test fails)
name: --pre Test

on:
  push:
    branches:
      - master
      - develop
      - bugfix/fix_pre_tests
  schedule:
    - cron: '0 */12 * * *'  # every 12 hours
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  download_data:
    name: Download test data
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - shell: bash
        run: bash build_utils/download_data.sh
      - name: Upload test data
        uses: actions/upload-artifact@v3
        with:
          name: test_data
          path: test_data
          retention-days: 5


  test:
    name: ${{ matrix.platform }} py${{ matrix.python }} ${{ matrix.backend }} --pre
    runs-on: ${{ matrix.platform }}
    needs: download_data
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-2019, macos-11, ubuntu-20.04]
        python: [3.9]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
          cache-dependency-path: 'requirements/requirements_pyinstaller.txt'

      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 git://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1
          if (Test-Path -Path "C:\Windows\system32\opengl32.dll" -PathType Leaf) {Exit 0} else {Exit 1}

      - name: Install ubuntu libraries
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils

      - name: Download test data
        uses: actions/download-artifact@v1
        with:
          name: test_data

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install setuptools tox tox-gh-actions

      - name: Test with tox linux
        # run tests using pip install --pre
        uses: GabrielBB/xvfb-action@v1
        timeout-minutes: 60
        with:
          run: python -m tox -v --pre
        env:
          PLATFORM: ${{ matrix.platform }}
          PYVISTA_OFF_SCREEN: True  # required for opengl on windows
          NAPARI: None

      # If something goes wrong, we can open an issue in the repo
      - name: Report Failures
        if: ${{ failure() }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PLATFORM: ${{ matrix.platform }}
          PYTHON: ${{ matrix.python }}
          RUN_ID: ${{ github.run_id }}
          TITLE: '[test-bot] pip install --pre is failing'
        with:
          filename: .github/TEST_FAIL_TEMPLATE.md
          update_existing: true

  pyinstaller:
    name: "Test pyinstaller build"
    runs-on: "ubuntu-latest"
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      name: Install Python 3.9
      with:
        python-version: 3.9
    - name: Install ubuntu libraries
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils
    - name: Install dependencies
      run: |
        pip install --upgrade pip==21.1
        pip install pip-tools
    - name: Compile and install PyInstaller requirements
      run: |
        pip-compile --output-file requirements.txt requirements/requirements_pyinstaller.in --pre
        pip-sync
        pip install .
    - name: upload requirements
      uses: actions/upload-artifact@v3
      with:
        name: requirements
        path: requirements.txt
    - name: Run PyInstaller
      run: python  build_utils/create_and_pack_executable.py
    - name: Upload bundle
      uses: actions/upload-artifact@v3
      with:
        name: bundle
        path: dist2/
    - name: Test bundle
      uses: GabrielBB/xvfb-action@v1
      timeout-minutes: 60
      with:
        run: dist/PartSeg/PartSeg _test

      # If something goes wrong, we can open an issue in the repo
    - name: Report Failures
      if: ${{ failure() }}
      uses: JasonEtco/create-an-issue@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PLATFORM: ${{ matrix.platform }}
        PYTHON: ${{ matrix.python }}
        RUN_ID: ${{ github.run_id }}
        TITLE: '[test-bot] pyinstaller bundle --pre is failing'
      with:
        filename: .github/TEST_FAIL_TEMPLATE.md
        update_existing: true
